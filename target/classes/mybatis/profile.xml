<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  namespace 와 id는 Dao에서 쓰임 -->
<!-- resultType을 쓰는 이유는 mybatis 에서 쓰기 좋게 바꿔주려고 Profile 라는 객체를 씀(mybatis에서 Profile라는 객체를 
	만들어줌 => 데이터베이스에서 얻은 값들을 찾아서 item에 주기위해 -->
	<mapper namespace="profile" >	
	
	<!--  Map, join -->
	 <resultMap type="Profile" id="ProfileMap"> 
		<id column="profile_seq" property="profileSeq" />
		<result column="customer_id" property="customerId" />
		<result column="profile_gender" property="profileGender" />
		<result column="profile_birthday" property="profileBirthday" />		
		<result column="profile_category" property="profileCategory" />
		<result column="profile_area" property="profileArea" />
		<result column="profile_money" property="profileMoney" />
		<result column="profile_state" property="profileState" />
		<result column="profile_time" property="profileTime" />
		<result column="profile_writing" property="profileWriting" />		
		<result column="profile_date" property="profileDate" />
		<result column="profile_check" property="profileCheck" />
		
		<result column="customer_nnm" property="customerNnm" />
		<result column="skill_content" property="skillContent" />
		
	</resultMap>
	
	<!-- 이직자 명함 모두 보기 -->
	<select id="listAll" resultType="Profile" resultMap="ProfileMap">
		SELECT profile.*, customer.customer_nnm, skill.skill_content
		FROM profile 
		JOIN customer ON profile.customer_id=customer.customer_id
		JOIN skill ON profile.profile_seq=skill.profile_seq
		ORDER BY profile.profile_seq DESC
	</select>
		
	<!-- 자신 명함 보기 -->
	<select id="list" resultType="Profile" resultMap="ProfileMap">
		SELECT profile.*, customer.customer_nnm, skill.skill_content
		FROM profile 
		JOIN customer ON profile.customer_id=customer.customer_id
		JOIN skill ON profile.profile_seq=skill.profile_seq
		WHERE profile.customer_id=#{customerId}
	</select>
	
	<!-- #{}은 필드명, mybatis-config 에서 세팅해주면 이것을 자동으로 고쳐줌(자바표기법:낙타 표기법) -->
	<insert id="add">
			INSERT INTO profile
			(profile_seq, customer_id, profile_gender, profile_birthday, profile_category, 
			profile_area, profile_money, profile_state, profile_time, profile_writing, 
			profile_date)

			VALUES (profile_seq.NEXTVAL, #{customerId}, #{profileGender}, #{profileBirthday}, #{profileCategory}, 
			#{profileArea}, #{profileMoney}, #{profileState}, #{profileTime}, #{profileWriting},
				SYSDATE)
		<selectKey resultType="Integer" keyProperty="profileSeq" order="AFTER">
			SELECT profile_seq.CURRVAL FROM dual
		</selectKey>
	</insert>
	
	<!-- 이직자 명함 수정 -->
	<update id="update">
		UPDATE profile 
		SET profile_gender= #{profileGender}, profile_birthday=#{profileBirthday}, profile_category=#{profileCategory},
		profile_area=#{profileArea}, profile_money=#{profileMoney}, profile_state=#{profileState}, profile_time=#{profileTime},
		profile_writing=#{profileWriting}, profile_date=SYSDATE
				
		WHERE customer_id=#{customerId}
	</update>
	
	<!-- 이력서 검증여부 -->
	<update id="profileCheck">
		UPDATE profile
		SET profile_check=#{profileCheck}
		WHERE profile_seq=#{profileSeq}
	</update>
	
	<!-- 이직자 명함 삭제 -->
	<delete id="delete">
		DELETE FROM profile
		WHERE profile_seq=#{profileSeq} OR customer_id=#{customerId}
	</delete>
		
	<!-- 이직자 명함 각각의 값(데이터베이스에서 얻은 값들을 찾아서 item에 주기위해) -->
	  <select id="item" resultMap="ProfileMap">
		SELECT profile.*, customer.customer_nnm, skill.skill_content
		FROM profile 
		JOIN customer ON profile.customer_id=customer.customer_id
		JOIN skill ON profile.profile_seq=skill.profile_seq
		WHERE profile.customer_id=#{customerId}
	</select>
	
</mapper>

